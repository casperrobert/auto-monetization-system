version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ams-postgres
    environment:
      POSTGRES_DB: ams_db
      POSTGRES_USER: ams_user
      POSTGRES_PASSWORD: ams_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ams-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ams_user -d ams_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    container_name: ams-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ams_user
      MONGO_INITDB_ROOT_PASSWORD: ams_password
      MONGO_INITDB_DATABASE: ams_db
    volumes:
      - mongodb_data:/data/db
      - ./backend/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - ams-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: ams-redis
    command: redis-server --requirepass ams_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ams-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: ams-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ams.local
      PGADMIN_DEFAULT_PASSWORD: admin123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - ams-network
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  pgadmin_data:

networks:
  ams-network:
    external: true